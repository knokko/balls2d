// Generated by fixie at 08-09-2024 21:30
package fixie

import kotlin.time.Duration
import kotlin.time.DurationUnit

@JvmInline
value class Displacement internal constructor(val value: FixDisplacement) : Comparable<Displacement> {


	fun toDouble(unit: DistanceUnit) = when (unit) {
		DistanceUnit.MILLIMETER -> value.toDouble() * 1000.0
		DistanceUnit.INCH -> value.toDouble() * 39.37007874015748
		DistanceUnit.FOOT -> value.toDouble() * 3.280839895013123
		DistanceUnit.YARD -> value.toDouble() * 1.0936132983377078
		DistanceUnit.METER -> value.toDouble()
		DistanceUnit.KILOMETER -> value.toDouble() * 0.001
		DistanceUnit.MILE -> value.toDouble() * 6.213711922373339E-4
		else -> throw IllegalArgumentException("Unsupported unit $unit")
	}

	override fun toString() = toString(DistanceUnit.METER)

	fun toString(unit: DistanceUnit): String {
		val rawDouble = raw(1).toDouble(unit)
		var numDecimalDigits = 0
		var referenceValue = 0.88
		while (rawDouble < referenceValue) {
			referenceValue *= 0.1
			numDecimalDigits += 1
		}
		return String.format("%.${numDecimalDigits}f%s", toDouble(unit), unit.abbreviation)
	}

	override operator fun compareTo(other: Displacement) = this.value.compareTo(other.value)

	operator fun unaryMinus() = Displacement(-value)

	operator fun plus(right: Displacement) = Displacement(this.value + right.value)

	operator fun minus(right: Displacement) = Displacement(this.value - right.value)

	operator fun times(right: Int) = Displacement(this.value * right)

	operator fun div(right: Int) = Displacement(this.value / right)

	operator fun times(right: Long) = Displacement(this.value * right)

	operator fun div(right: Long) = Displacement(this.value / right)

	operator fun times(right: FixDisplacement) = Displacement(this.value * right)

	operator fun div(right: FixDisplacement) = Displacement(this.value / right)

	operator fun times(right: Float) = Displacement(FixDisplacement.from(this.value.toDouble() * right))

	operator fun div(right: Float) = Displacement(FixDisplacement.from(this.value.toDouble() / right))

	operator fun times(right: Double) = Displacement(FixDisplacement.from(this.value.toDouble() * right))

	operator fun div(right: Double) = Displacement(FixDisplacement.from(this.value.toDouble() / right))

	operator fun div(right: Displacement) = this.value.toDouble() / right.value.toDouble()

	operator fun times(right: Displacement) = Area.SQUARE_METER * this.toDouble(DistanceUnit.METER) * right.toDouble(DistanceUnit.METER)

	operator fun times(right: Area) = Volume.CUBIC_METER * this.toDouble(DistanceUnit.METER) * right.toDouble(AreaUnit.SQUARE_METER)

	operator fun div(right: Duration) = Speed.METERS_PER_SECOND * (this.toDouble(DistanceUnit.METER) / right.toDouble(DurationUnit.SECONDS))

	companion object {

		fun raw(value: Int) = Displacement(FixDisplacement.raw(value))

		val METER = raw(100000)

		val MILE = raw(160934400)

		val KILOMETER = raw(100000000)

		val YARD = raw(91440)

		val FOOT = raw(30480)

		val INCH = raw(2540)

		val MILLIMETER = raw(100)
	}
}

operator fun Int.times(right: Displacement) = right * this

val Int.mm
	get() = Displacement.MILLIMETER * this

val Int.inch
	get() = Displacement.INCH * this

val Int.ft
	get() = Displacement.FOOT * this

val Int.yd
	get() = Displacement.YARD * this

val Int.m
	get() = Displacement.METER * this

val Int.km
	get() = Displacement.KILOMETER * this

val Int.mi
	get() = Displacement.MILE * this

operator fun Long.times(right: Displacement) = right * this

val Long.mm
	get() = Displacement.MILLIMETER * this

val Long.inch
	get() = Displacement.INCH * this

val Long.ft
	get() = Displacement.FOOT * this

val Long.yd
	get() = Displacement.YARD * this

val Long.m
	get() = Displacement.METER * this

val Long.km
	get() = Displacement.KILOMETER * this

val Long.mi
	get() = Displacement.MILE * this

operator fun Float.times(right: Displacement) = right * this

val Float.mm
	get() = Displacement.MILLIMETER * this

val Float.inch
	get() = Displacement.INCH * this

val Float.ft
	get() = Displacement.FOOT * this

val Float.yd
	get() = Displacement.YARD * this

val Float.m
	get() = Displacement.METER * this

val Float.km
	get() = Displacement.KILOMETER * this

val Float.mi
	get() = Displacement.MILE * this

operator fun Double.times(right: Displacement) = right * this

val Double.mm
	get() = Displacement.MILLIMETER * this

val Double.inch
	get() = Displacement.INCH * this

val Double.ft
	get() = Displacement.FOOT * this

val Double.yd
	get() = Displacement.YARD * this

val Double.m
	get() = Displacement.METER * this

val Double.km
	get() = Displacement.KILOMETER * this

val Double.mi
	get() = Displacement.MILE * this

operator fun FixDisplacement.times(right: Displacement) = right * this

val FixDisplacement.mm
	get() = Displacement.MILLIMETER * this

val FixDisplacement.inch
	get() = Displacement.INCH * this

val FixDisplacement.ft
	get() = Displacement.FOOT * this

val FixDisplacement.yd
	get() = Displacement.YARD * this

val FixDisplacement.m
	get() = Displacement.METER * this

val FixDisplacement.km
	get() = Displacement.KILOMETER * this

val FixDisplacement.mi
	get() = Displacement.MILE * this

fun abs(x: Displacement) = Displacement(abs(x.value))

fun min(a: Displacement, b: Displacement) = Displacement(min(a.value, b.value))

fun max(a: Displacement, b: Displacement) = Displacement(max(a.value, b.value))
