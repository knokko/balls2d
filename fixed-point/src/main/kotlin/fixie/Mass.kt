// Generated by fixie at 08-09-2024 21:30
package fixie

import kotlin.math.min
import kotlin.math.max
import kotlin.math.abs

@JvmInline
value class Mass internal constructor(val value: Double) : Comparable<Mass> {


	fun toDouble(unit: MassUnit) = when (unit) {
		MassUnit.MILLIGRAM -> value * 1000000.0
		MassUnit.GRAM -> value * 1000.0
		MassUnit.OUNCE -> value * 35.27396194958041
		MassUnit.POUND -> value * 2.2046226218487757
		MassUnit.KILOGRAM -> value
		MassUnit.TON -> value * 0.001
	}

	fun toString(unit: MassUnit) = String.format("%.3f%s", toDouble(unit), unit.abbreviation)

	override fun toString() = toString(MassUnit.KILOGRAM)

	override operator fun compareTo(other: Mass) = this.value.compareTo(other.value)

	operator fun unaryMinus() = Mass(-value)

	operator fun plus(right: Mass) = Mass(this.value + right.value)

	operator fun minus(right: Mass) = Mass(this.value - right.value)

	operator fun div(right: Mass) = this.value / right.value

	operator fun times(right: Int) = Mass(this.value * right)

	operator fun div(right: Int) = Mass(this.value / right)

	operator fun times(right: Long) = Mass(this.value * right)

	operator fun div(right: Long) = Mass(this.value / right)

	operator fun times(right: Float) = Mass(this.value * right)

	operator fun div(right: Float) = Mass(this.value / right)

	operator fun times(right: Double) = Mass(this.value * right)

	operator fun div(right: Double) = Mass(this.value / right)

	operator fun div(right: Density) = Volume.LITER * value / right.toDouble()

	operator fun div(right: Volume) = Density.KGPL * value / right.toDouble(VolumeUnit.LITER)

	operator fun times(right: Speed) = Momentum.NEWTON_SECOND * value * right.toDouble(SpeedUnit.METERS_PER_SECOND)

	companion object {
		fun raw(value: Double) = Mass(value)

		val MILLIGRAM = Mass(1.0E-6)
		val GRAM = Mass(0.001)
		val OUNCE = Mass(0.028349523125)
		val POUND = Mass(0.45359237)
		val KILOGRAM = Mass(1.0)
		val TON = Mass(1000.0)
	}
}

operator fun Int.times(right: Mass) = right * this

val Int.mg
	get() = Mass.MILLIGRAM * this

val Int.g
	get() = Mass.GRAM * this

val Int.oz
	get() = Mass.OUNCE * this

val Int.lbs
	get() = Mass.POUND * this

val Int.kg
	get() = Mass.KILOGRAM * this

val Int.t
	get() = Mass.TON * this

operator fun Long.times(right: Mass) = right * this

val Long.mg
	get() = Mass.MILLIGRAM * this

val Long.g
	get() = Mass.GRAM * this

val Long.oz
	get() = Mass.OUNCE * this

val Long.lbs
	get() = Mass.POUND * this

val Long.kg
	get() = Mass.KILOGRAM * this

val Long.t
	get() = Mass.TON * this

operator fun Float.times(right: Mass) = right * this

val Float.mg
	get() = Mass.MILLIGRAM * this

val Float.g
	get() = Mass.GRAM * this

val Float.oz
	get() = Mass.OUNCE * this

val Float.lbs
	get() = Mass.POUND * this

val Float.kg
	get() = Mass.KILOGRAM * this

val Float.t
	get() = Mass.TON * this

operator fun Double.times(right: Mass) = right * this

val Double.mg
	get() = Mass.MILLIGRAM * this

val Double.g
	get() = Mass.GRAM * this

val Double.oz
	get() = Mass.OUNCE * this

val Double.lbs
	get() = Mass.POUND * this

val Double.kg
	get() = Mass.KILOGRAM * this

val Double.t
	get() = Mass.TON * this

fun abs(x: Mass) = Mass(abs(x.value))

fun min(a: Mass, b: Mass) = Mass(min(a.value, b.value))

fun max(a: Mass, b: Mass) = Mass(max(a.value, b.value))
