// Generated by fixie at 04-09-2024 16:25
package fixie

import kotlin.math.min
import kotlin.math.max
import kotlin.math.abs
import kotlin.math.sqrt

@JvmInline
value class SquareSpeed internal constructor(val value: Double) : Comparable<SquareSpeed> {


	/** Gets the square speed value, in (m/s)^2 */
	fun toDouble() = value

	override fun toString() = String.format("%.2f%s", value, "(m/s)^2")

	override operator fun compareTo(other: SquareSpeed) = this.value.compareTo(other.value)

	operator fun unaryMinus() = SquareSpeed(-value)

	operator fun plus(right: SquareSpeed) = SquareSpeed(this.value + right.value)

	operator fun minus(right: SquareSpeed) = SquareSpeed(this.value - right.value)

	operator fun div(right: SquareSpeed) = this.value / right.value

	operator fun times(right: Int) = SquareSpeed(this.value * right)

	operator fun div(right: Int) = SquareSpeed(this.value / right)

	operator fun times(right: Long) = SquareSpeed(this.value * right)

	operator fun div(right: Long) = SquareSpeed(this.value / right)

	operator fun times(right: Float) = SquareSpeed(this.value * right)

	operator fun div(right: Float) = SquareSpeed(this.value / right)

	operator fun times(right: Double) = SquareSpeed(this.value * right)

	operator fun div(right: Double) = SquareSpeed(this.value / right)

	operator fun div(right: Speed) = Speed.METERS_PER_SECOND * toDouble() / right.toDouble(SpeedUnit.METERS_PER_SECOND)

	companion object {
		fun raw(value: Double) = SquareSpeed(value)

		val SQUARE_METERS_PER_SECOND = SquareSpeed(1.0)
	}
}

operator fun Int.times(right: SquareSpeed) = right * this

val Int.squareMps
	get() = SquareSpeed.SQUARE_METERS_PER_SECOND * this

operator fun Long.times(right: SquareSpeed) = right * this

val Long.squareMps
	get() = SquareSpeed.SQUARE_METERS_PER_SECOND * this

operator fun Float.times(right: SquareSpeed) = right * this

val Float.squareMps
	get() = SquareSpeed.SQUARE_METERS_PER_SECOND * this

operator fun Double.times(right: SquareSpeed) = right * this

val Double.squareMps
	get() = SquareSpeed.SQUARE_METERS_PER_SECOND * this

fun abs(x: SquareSpeed) = SquareSpeed(abs(x.value))

fun min(a: SquareSpeed, b: SquareSpeed) = SquareSpeed(min(a.value, b.value))

fun max(a: SquareSpeed, b: SquareSpeed) = SquareSpeed(max(a.value, b.value))

fun sqrt(x: SquareSpeed) = Speed.METERS_PER_SECOND * sqrt(x.value)
