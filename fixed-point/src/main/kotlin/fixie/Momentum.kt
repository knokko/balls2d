// Generated by fixie at 08-09-2024 21:30
package fixie

import kotlin.math.min
import kotlin.math.max
import kotlin.math.abs

@JvmInline
value class Momentum internal constructor(val value: Double) : Comparable<Momentum> {


	/** Gets the momentum value, in Ns */
	fun toDouble() = value

	override fun toString() = String.format("%.2f%s", value, "Ns")

	override operator fun compareTo(other: Momentum) = this.value.compareTo(other.value)

	operator fun unaryMinus() = Momentum(-value)

	operator fun plus(right: Momentum) = Momentum(this.value + right.value)

	operator fun minus(right: Momentum) = Momentum(this.value - right.value)

	operator fun div(right: Momentum) = this.value / right.value

	operator fun times(right: Int) = Momentum(this.value * right)

	operator fun div(right: Int) = Momentum(this.value / right)

	operator fun times(right: Long) = Momentum(this.value * right)

	operator fun div(right: Long) = Momentum(this.value / right)

	operator fun times(right: Float) = Momentum(this.value * right)

	operator fun div(right: Float) = Momentum(this.value / right)

	operator fun times(right: Double) = Momentum(this.value * right)

	operator fun div(right: Double) = Momentum(this.value / right)

	operator fun div(right: Speed) = Mass.KILOGRAM * (toDouble() / right.toDouble(SpeedUnit.METERS_PER_SECOND))

	operator fun div(right: Mass) = Speed.METERS_PER_SECOND * (toDouble() / right.toDouble(MassUnit.KILOGRAM))

	operator fun times(right: Momentum) = SquareMomentum.SQUARE_NEWTON_SECOND * toDouble() * right.toDouble()

	companion object {
		fun raw(value: Double) = Momentum(value)

		val NEWTON_SECOND = Momentum(1.0)
	}
}

operator fun Int.times(right: Momentum) = right * this

val Int.newSec
	get() = Momentum.NEWTON_SECOND * this

operator fun Long.times(right: Momentum) = right * this

val Long.newSec
	get() = Momentum.NEWTON_SECOND * this

operator fun Float.times(right: Momentum) = right * this

val Float.newSec
	get() = Momentum.NEWTON_SECOND * this

operator fun Double.times(right: Momentum) = right * this

val Double.newSec
	get() = Momentum.NEWTON_SECOND * this

fun abs(x: Momentum) = Momentum(abs(x.value))

fun min(a: Momentum, b: Momentum) = Momentum(min(a.value, b.value))

fun max(a: Momentum, b: Momentum) = Momentum(max(a.value, b.value))
